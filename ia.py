import sys 
import json
import pandas as pd
import os
from sklearn.model_selection import train_test_split
import scikitplot as skplt
from sklearn import metrics
from sklearn.model_selection import cross_validate
from sklearn.model_selection import cross_val_score
from joblib import dump, load 
from sklearn.neural_network import MLPClassifier
listPro = list()
aprendi = sys.argv[1]
#aprendi = '[[{"f1":"1","f2":"1","f3":"1","f4":"1","f5":"1","f6":"1","f7":"1","f8":"1","f9":"1","f10":"1","f11":"1","f12":"1","f13":"1","f14":"1","f15":"1","f16":"1","f17":"1","f18":"1","f19":"1","f20":"1","f21":"1","f22":"1","f23":"1","f24":"1","f25":"1","f26":"1","f27":"1","f28":"1","f29":"1","f30":"1","f31":"1","f32":"1","f33":"1","f34":"1","f35":"1","f36":"1","f37":"1","f38":"1","f39":"1","f40":"1","f41":"3","f42":"3","f43":"3","f44":"3","f45":"3","f46":"3","f47":"3","f48":"3","f49":"3","f50":"3","f51":"3","f52":"3","f53":"3","f54":"3","f55":"3","f56":"3","f57":"3","f58":"3","f59":"3","f60":"3","f61":"2","f62":"2","f63":"2","f64":"2","f65":"2","f66":"2","f67":"2","f68":"2","f69":"2","f70":"2","f71":"2","f72":"2","f73":"2","f74":"2","f75":"2","f76":"2","f77":"2","f78":"2","f79":"2","f80":"2","f81":"4","f82":"4","f83":"4","f84":"4","f85":"4","f86":"4","f87":"4","f88":"4","f89":"4","f90":"4","f91":"2","f92":"2","f93":"2","f94":"2","f95":"2","f96":"2","f97":"2","f98":"2","f99":"2","f100":"2","f101":1,"f102":"Malo"}],[{"f1":"3","f2":"3","f3":"3","f4":"3","f5":"3","f6":"3","f7":"3","f8":"3","f9":"3","f10":"3","f11":"3","f12":"3","f13":"3","f14":"3","f15":"3","f16":"3","f17":"3","f18":"3","f19":"3","f20":"3","f21":"3","f22":"3","f23":"3","f24":"3","f25":"3","f26":"3","f27":"3","f28":"3","f29":"3","f30":"3","f31":"3","f32":"3","f33":"3","f34":"3","f35":"3","f36":"3","f37":"3","f38":"3","f39":"3","f40":"3","f41":"3","f42":"3","f43":"3","f44":"3","f45":"3","f46":"3","f47":"3","f48":"3","f49":"3","f50":"3","f51":"2","f52":"2","f53":"2","f54":"2","f55":"2","f56":"2","f57":"2","f58":"2","f59":"2","f60":"2","f61":"4","f62":"4","f63":"4","f64":"4","f65":"4","f66":"4","f67":"4","f68":"4","f69":"4","f70":"4","f71":"4","f72":"4","f73":"4","f74":"4","f75":"4","f76":"4","f77":"4","f78":"4","f79":"4","f80":"4","f81":"4","f82":"4","f83":"4","f84":"4","f85":"4","f86":"1","f87":"1","f88":"1","f89":"1","f90":"1","f91":"2","f92":"2","f93":"2","f94":"2","f95":"2","f96":"2","f97":"2","f98":"2","f99":"2","f100":"2","f101":2,"f102":"Bueno"}],[{"f1":"2","f2":"2","f3":"2","f4":"2","f5":"2","f6":"2","f7":"2","f8":"2","f9":"2","f10":"2","f11":"2","f12":"2","f13":"2","f14":"2","f15":"2","f16":"2","f17":"2","f18":"2","f19":"2","f20":"2","f21":"2","f22":"2","f23":"2","f24":"2","f25":"2","f26":"2","f27":"2","f28":"2","f29":"2","f30":"2","f31":"1","f32":"1","f33":"1","f34":"1","f35":"1","f36":"1","f37":"1","f38":"1","f39":"1","f40":"1","f41":"3","f42":"3","f43":"3","f44":"3","f45":"3","f46":"3","f47":"3","f48":"3","f49":"3","f50":"3","f51":"3","f52":"3","f53":"3","f54":"3","f55":"3","f56":"3","f57":"3","f58":"3","f59":"3","f60":"3","f61":"3","f62":"3","f63":"3","f64":"3","f65":"3","f66":"4","f67":"4","f68":"4","f69":"4","f70":"4","f71":"2","f72":"2","f73":"2","f74":"2","f75":"2","f76":"2","f77":"2","f78":"2","f79":"2","f80":"2","f81":"2","f82":"2","f83":"2","f84":"2","f85":"2","f86":"2","f87":"2","f88":"2","f89":"2","f90":"2","f91":"2","f92":"2","f93":"2","f94":"2","f95":"2","f96":"2","f97":"2","f98":"2","f99":"2","f100":"2","f101":3,"f102":"Malo"}],[{"f1":"4","f2":"4","f3":"4","f4":"4","f5":"4","f6":"4","f7":"4","f8":"4","f9":"4","f10":"4","f11":"4","f12":"4","f13":"4","f14":"4","f15":"4","f16":"4","f17":"4","f18":"4","f19":"4","f20":"4","f21":"4","f22":"4","f23":"4","f24":"4","f25":"4","f26":"1","f27":"1","f28":"1","f29":"1","f30":"1","f31":"1","f32":"1","f33":"1","f34":"1","f35":"1","f36":"1","f37":"1","f38":"1","f39":"1","f40":"1","f41":"3","f42":"3","f43":"3","f44":"3","f45":"3","f46":"3","f47":"3","f48":"3","f49":"3","f50":"3","f51":"3","f52":"3","f53":"3","f54":"3","f55":"3","f56":"3","f57":"3","f58":"3","f59":"3","f60":"3","f61":"4","f62":"4","f63":"4","f64":"4","f65":"4","f66":"4","f67":"4","f68":"4","f69":"4","f70":"4","f71":"4","f72":"4","f73":"4","f74":"4","f75":"4","f76":"4","f77":"4","f78":"4","f79":"4","f80":"4","f81":"4","f82":"4","f83":"4","f84":"4","f85":"4","f86":"4","f87":"4","f88":"4","f89":"4","f90":"4","f91":"2","f92":"2","f93":"2","f94":"2","f95":"2","f96":"2","f97":"2","f98":"2","f99":"2","f100":"2","f101":4,"f102":"Bueno"}],[{"f1":"1","f2":"1","f3":"1","f4":"1","f5":"1","f6":"1","f7":"1","f8":"1","f9":"1","f10":"1","f11":"1","f12":"1","f13":"1","f14":"1","f15":"1","f16":"1","f17":"1","f18":"1","f19":"1","f20":"1","f21":"1","f22":"1","f23":"1","f24":"1","f25":"1","f26":"2","f27":"2","f28":"2","f29":"2","f30":"2","f31":"1","f32":"1","f33":"1","f34":"1","f35":"1","f36":"2","f37":"2","f38":"2","f39":"2","f40":"2","f41":"2","f42":"2","f43":"2","f44":"2","f45":"2","f46":"2","f47":"2","f48":"2","f49":"2","f50":"2","f51":"2","f52":"2","f53":"2","f54":"2","f55":"2","f56":"2","f57":"2","f58":"2","f59":"2","f60":"2","f61":"3","f62":"3","f63":"3","f64":"3","f65":"3","f66":"3","f67":"3","f68":"3","f69":"3","f70":"3","f71":"3","f72":"3","f73":"3","f74":"3","f75":"3","f76":"3","f77":"3","f78":"3","f79":"3","f80":"3","f81":"3","f82":"3","f83":"3","f84":"3","f85":"3","f86":"3","f87":"3","f88":"3","f89":"3","f90":"3","f91":"3","f92":"3","f93":"3","f94":"3","f95":"3","f96":"3","f97":"3","f98":"3","f99":"3","f100":"3","f101":5,"f102":"Malo"}],[{"f1":"3","f2":"3","f3":"3","f4":"3","f5":"3","f6":"3","f7":"3","f8":"3","f9":"3","f10":"3","f11":"3","f12":"3","f13":"3","f14":"3","f15":"3","f16":"3","f17":"3","f18":"3","f19":"3","f20":"3","f21":"3","f22":"3","f23":"3","f24":"3","f25":"3","f26":"4","f27":"4","f28":"4","f29":"4","f30":"4","f31":"3","f32":"3","f33":"3","f34":"3","f35":"3","f36":"4","f37":"4","f38":"4","f39":"4","f40":"4","f41":"4","f42":"4","f43":"4","f44":"4","f45":"4","f46":"4","f47":"4","f48":"4","f49":"4","f50":"4","f51":"4","f52":"4","f53":"4","f54":"4","f55":"4","f56":"4","f57":"4","f58":"4","f59":"4","f60":"4","f61":"1","f62":"1","f63":"1","f64":"1","f65":"1","f66":"1","f67":"1","f68":"1","f69":"1","f70":"1","f71":"1","f72":"1","f73":"1","f74":"1","f75":"1","f76":"1","f77":"1","f78":"1","f79":"1","f80":"1","f81":"1","f82":"1","f83":"1","f84":"1","f85":"1","f86":"1","f87":"1","f88":"1","f89":"1","f90":"1","f91":"1","f92":"1","f93":"1","f94":"1","f95":"1","f96":"1","f97":"1","f98":"1","f99":"1","f100":"1","f101":6,"f102":"Bueno"}]]'

aprendi = json.loads(aprendi)

for i in range(len(aprendi)):
    for c in range(len(aprendi[i])):
        listPro.append(aprendi[i][c])

df = pd.DataFrame.from_dict(listPro)

iteH = list(aprendi[0][0].keys())
iteH.remove("f101")
iteH.remove("f102")

def arbolEntre(headers):
    randomState = 1
    df.groupby("f102").size()
    train, test = train_test_split(df, test_size = 0.4, stratify=df['f102'], random_state=42)
    X_train = train[headers]
    y_train = train.f102
    X_test = test[headers]
    y_test = test.f102
    script_dir = os.path.dirname(__file__)
    if os.path.exists(f'{script_dir}/entre.joblib'):
        mod_dt = load(f'{script_dir}/entre.joblib') 
    else:
        mod_dt = MLPClassifier(solver='lbfgs', 
                    alpha=1e-5,
                    hidden_layer_sizes=(6,), 
                    random_state=int(randomState))
    cv_results = cross_validate(mod_dt, X_train, y_train, cv=2, return_estimator=True)
    promedio = list()
    for i in range(len(cv_results['estimator'])):
        promedio.append(cv_results['test_score'][i])
    avg = sum(promedio) / len(promedio)
    closest = min(promedio, key=lambda x:abs(x-avg))
    for i in range(len(cv_results['estimator'])):
        if cv_results['test_score'][i] == closest:
            avgModel = cv_results['estimator'][i]
    scores = cross_val_score(avgModel, X_train, y_train, cv=2)
    prediction=avgModel.predict(X_test)
    script_dir = os.path.dirname(__file__)
    dump(avgModel, f'{script_dir}/entre.joblib')
    skplt.metrics.plot_confusion_matrix(y_test, prediction, normalize=True)
    X_nuevos = df[headers]
    y_pred = avgModel.predict(X_nuevos)
    print("Accuracy"+"|"+"{:.3f}".format(metrics.accuracy_score(prediction,y_test)))
    sys.stdout.flush()


def classificationNeuro(headers):
    df.groupby('f102').size()
    script_dir = os.path.dirname(__file__)
    clf = load(f'{script_dir}/entre.joblib') 
    X_nuevos = df[headers]
    y_pred = clf.predict(X_nuevos)
    print(y_pred[0])
    df['f102']=y_pred
    sys.stdout.flush()

classificationNeuro(iteH)
